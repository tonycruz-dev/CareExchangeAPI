// <auto-generated />
using System;
using CareExchangeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CareExchangeAPI.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250509170343_ClientPaymentsAdded")]
    partial class ClientPaymentsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareExchangeAPI.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("CalendarUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarShiftId");

                    b.HasIndex("CalendarUserId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CandidateAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CndAviCandidateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DayAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("NightAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CndAviCandidateID");

                    b.ToTable("CandidateAvailabilities");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CandidateDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CanDocID")
                        .HasColumnType("int");

                    b.Property<int>("CandidateDocID")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Uploaded");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CanDocID");

                    b.HasIndex("CandidateDocID");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserProfileId");

                    b.ToTable("CandidateDocuments");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CareHomeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CareHomeClientUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LegalEntity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CareHomeClientUserID");

                    b.HasIndex("UserId");

                    b.ToTable("CareHomeClients");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CareHomeClientLocation", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CareHomeClientID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("DefaultEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("DefaultStartTime")
                        .HasColumnType("time");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("CareHomeClientID");

                    b.ToTable("CareHomeClientLocations");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ClientPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountCharged")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CPShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("CareHomeClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClienPaytId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<string>("StripeTransactionID")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CPShiftId");

                    b.HasIndex("CareHomeClientId");

                    b.HasIndex("ClienPaytId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ClientPayments");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CandidateVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ClientVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ExpiryDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBroadcast")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int?>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationUserID")
                        .HasColumnType("int");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Candidate");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOfNotification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationUserID");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("CreatedByClientUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("JobTypeID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByClientUserID");

                    b.HasIndex("JobTypeID");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromShiftId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ShiftAssignments");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftCancellation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CancelledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedByUserID")
                        .HasColumnType("int");

                    b.Property<int>("SCId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("RequestedByUserID");

                    b.HasIndex("SCId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserProfileId1");

                    b.ToTable("ShiftCancellations");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OldStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShiftLogId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftLogUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ShiftLogId");

                    b.HasIndex("ShiftLogUserID");

                    b.ToTable("ShiftLogs");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OfferStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("OfferedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftOfferCandidateID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftOfferShiftID")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("ShiftOfferCandidateID");

                    b.HasIndex("ShiftOfferShiftID");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ShiftOffers");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftRate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Base");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftRates");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CareRatedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SRRatedByUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ShID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CareRatedUserID");

                    b.HasIndex("SRRatedByUserID");

                    b.HasIndex("ShID");

                    b.ToTable("ShiftRatings");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApprovedByClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("CareHomeClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Rejected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<string>("SignedOffBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SubmittedByCandidate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("TimesheetClientID")
                        .HasColumnType("int");

                    b.Property<int?>("TimesheetShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("TimesheetUserPrifileId")
                        .HasColumnType("int");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CareHomeClientId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TimesheetClientID");

                    b.HasIndex("TimesheetShiftId");

                    b.HasIndex("TimesheetUserPrifileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CareExchangeAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayrollID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneVisibleToClients")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartedAtCX")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingPostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileUserID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CalendarEvent", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarShiftId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "User")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CandidateAvailability", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Candidate")
                        .WithMany("CandidateAvailabilities")
                        .HasForeignKey("CndAviCandidateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CandidateDocument", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("CanDocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateDocID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Document", null)
                        .WithMany("CandidateDocuments")
                        .HasForeignKey("DocumentId");

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("CandidateDocuments")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Candidate");

                    b.Navigation("Document");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CareHomeClient", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CareHomeClientUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany("CareHomeClients")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CareHomeClientLocation", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.CareHomeClient", "CareHomeClient")
                        .WithMany("Locations")
                        .HasForeignKey("CareHomeClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareHomeClient");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ClientPayment", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("CPShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.CareHomeClient", null)
                        .WithMany("ClientPayments")
                        .HasForeignKey("CareHomeClientId");

                    b.HasOne("CareExchangeAPI.Models.CareHomeClient", "Client")
                        .WithMany()
                        .HasForeignKey("ClienPaytId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("ClientPayments")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Client");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Message", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Notification", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("NotificationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Shift", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "CreatedByClientUser")
                        .WithMany()
                        .HasForeignKey("CreatedByClientUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.CareHomeClientLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("Shifts")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("CreatedByClientUser");

                    b.Navigation("JobType");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftAssignment", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("FromShiftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("ShiftAssignments")
                        .HasForeignKey("ShiftId");

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("ShiftAssignments")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Shift");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftCancellation", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("SCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("ShiftCancellations")
                        .HasForeignKey("ShiftId");

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("ApprovedCancellations")
                        .HasForeignKey("UserProfileId");

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("CancellationRequests")
                        .HasForeignKey("UserProfileId1");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftLog", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany("ShiftLogs")
                        .HasForeignKey("ShiftLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "ChangedByUser")
                        .WithMany("ShiftLogsChanged")
                        .HasForeignKey("ShiftLogUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftOffer", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("ShiftOffers")
                        .HasForeignKey("ShiftId");

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("ShiftOfferCandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftOfferShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("ShiftOffers")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Candidate");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftRate", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("ShiftRates")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.ShiftRating", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.UserProfile", "RatedUser")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("CareRatedUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "RatedByUser")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("SRRatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany("ShiftRatings")
                        .HasForeignKey("ShID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RatedByUser");

                    b.Navigation("RatedUser");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Timesheet", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.CareHomeClient", null)
                        .WithMany("Timesheets")
                        .HasForeignKey("CareHomeClientId");

                    b.HasOne("CareExchangeAPI.Models.Shift", null)
                        .WithMany("Timesheets")
                        .HasForeignKey("ShiftId");

                    b.HasOne("CareExchangeAPI.Models.CareHomeClient", "Client")
                        .WithMany()
                        .HasForeignKey("TimesheetClientID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("TimesheetShiftId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", "Candidate")
                        .WithMany()
                        .HasForeignKey("TimesheetUserPrifileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareExchangeAPI.Models.UserProfile", null)
                        .WithMany("Timesheets")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Candidate");

                    b.Navigation("Client");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.UserProfile", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("CareExchangeAPI.Models.UserProfile", "ProfileUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CareExchangeAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareExchangeAPI.Models.CareHomeClient", b =>
                {
                    b.Navigation("ClientPayments");

                    b.Navigation("Locations");

                    b.Navigation("Timesheets");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Document", b =>
                {
                    b.Navigation("CandidateDocuments");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.Shift", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("ClientPayments");

                    b.Navigation("ShiftAssignments");

                    b.Navigation("ShiftCancellations");

                    b.Navigation("ShiftLogs");

                    b.Navigation("ShiftOffers");

                    b.Navigation("ShiftRates");

                    b.Navigation("ShiftRatings");

                    b.Navigation("Timesheets");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.User", b =>
                {
                    b.Navigation("CareHomeClients");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CareExchangeAPI.Models.UserProfile", b =>
                {
                    b.Navigation("ApprovedCancellations");

                    b.Navigation("CalendarEvents");

                    b.Navigation("CancellationRequests");

                    b.Navigation("CandidateAvailabilities");

                    b.Navigation("CandidateDocuments");

                    b.Navigation("Notifications");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("ShiftAssignments");

                    b.Navigation("ShiftLogsChanged");

                    b.Navigation("ShiftOffers");

                    b.Navigation("Shifts");

                    b.Navigation("Timesheets");
                });
#pragma warning restore 612, 618
        }
    }
}
